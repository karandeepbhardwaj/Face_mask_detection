# -*- coding: utf-8 -*-
"""MaskDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rH7vZSoZYlKe4pBb5Y2-PrGYkncMcFV
"""

import torch 
import os
from tqdm import tqdm
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path
import cv2
import numpy as np
import torch.nn as nn
import torch.nn.functional as F

from torch.utils.data.dataset import Dataset
from torchvision.transforms import Compose, Resize, ToPILImage, ToTensor

from torch.utils.data.dataloader import DataLoader
from torchvision.utils import make_grid

# from google.colab import drive
# drive.mount('/content/drive')

#Configuration environment
import os

os.environ['KAGGLE_USERNAME'] = "karandeepbhardwaj" # username from the json file
os.environ['KAGGLE_KEY'] = "a188728f8e2873a3cd0394bd2b543ffb" # key from the json file

!kaggle datasets download -d andrewmvd/animal-faces
!kaggle datasets download -d ashishjangra27/face-mask-12k-images-dataset
!unzip face-mask-12k-images-dataset.zip -d my_human_data
!unzip animal-faces.zip -d my_not_human_data
();

#Data Loading
classes = ['NotMasked', 'Masked', 'NotHuman']

maskPath = './my_human_data/Face Mask Dataset/Train/Mask/'
nonMaskPath = './my_human_data/Face Mask Dataset/Train/NoMask/'
nonHumanPath ='./my_not_human_data/afhq/train/NotHuman/'

# maskDF = pd.DataFrame() 

directories = [ [maskPath,1],[nonMaskPath,0],[nonHumanPath,2] ]
directories = {1:maskPath,
                2:nonMaskPath,
                3:nonHumanPath}

class FaceMaskDataSet():

    IMAGE_SIZE = 100
    LABELS = {'NON_MASKED': 0, 'MASKED': 1, 'NOT_HUMAN': 2}
    trainingData = []
    count = 0
    
    def makeDataSet(self):

        for label, data_dir in directories.items():
            print('Reading from: ',label)

            for folder in tqdm(os.listdir(data_dir)):
                folder_path = os.path.join(data_dir, folder)
                for imgpath in os.listdir(folder_path):
                    self.count += 1                       
                    img_path = os.path.join(folder_path, imgpath)
                    
                    img = cv2.imread(img_path)
                    img = cv2.resize(img, (self.IMAGE_SIZE,self.IMAGE_SIZE))
                    
                    self.trainingData.append([np.array(img), label])
                    self.count +=1

                    if label == 1:
                        self.LABELS['MASKED'] += 1
                    if label == 0:
                        self.LABELS['NON_MASKED'] +=1
                    if label == 2:
                        self.LABELS['NOT_HUMAN'] +=1
                    pass
            print(self.LABELS)
        np.random.shuffle(self.trainingData)
        

FaceMaskDataSet = FaceMaskDataSet()
FaceMaskDataSet.makeDataSet()
trainingData = FaceMaskDataSet.trainingData

trainingData[10][0].shape


print("Verfication of Dataset created with labels:\n")
plt.imshow(trainingData[5][0])
print(classes[trainingData[5][1]])


class MaskDataset(Dataset):
        def __init__(self, train_data):
            self.train_data = train_data
            self.transformations = Compose([
                ToTensor(),
            ])
        
        def __getitem__(self, key):
            if isinstance(key, slice):
                raise NotImplementedError('slicing is not supported')                    
            return [
                self.transformations(self.train_data[key][0]),
                torch.tensor(self.train_data[key][1])
            ]
        
        def __len__(self):
            return len(self.train_data)

myDataset = MaskDataset(trainingData)

train_ds, val_ds = torch.utils.data.random_split(myDataset, [(len(myDataset) - 1000), 1000])

train_dl = DataLoader(train_ds, 32 * 2, shuffle=True)
val_dl = DataLoader(val_ds, 32 * 2)

#CNN Model

def accuracy(outputs, labels):
    _, preds = torch.max(outputs, dim=1)
    return torch.tensor(torch.sum(preds == labels).item() / len(preds))

class ImageClassificationBase(nn.Module):
    def training_step(self, batch):
        images, labels = batch 
        out = self(images)                  # Generate predictions
        loss = F.cross_entropy(out, labels.long()) # Calculate loss
        return loss
    
    def validation_step(self, batch):
        images, labels = batch 
        out = self(images)                    # Generate predictions
        loss = F.cross_entropy(out, labels.long())   # Calculate loss
        acc = accuracy(out, labels)           # Calculate accuracy
        return {'val_loss': loss.detach(), 'val_acc': acc}
        
    def validation_epoch_end(self, outputs):
        batch_losses = [x['val_loss'] for x in outputs]
        epoch_loss = torch.stack(batch_losses).mean()   # Combine losses
        batch_accs = [x['val_acc'] for x in outputs]
        epoch_acc = torch.stack(batch_accs).mean()      # Combine accuracies
        return {'val_loss': epoch_loss.item(), 'val_acc': epoch_acc.item()}
    
    def epoch_end(self, epoch, result):
        print("Epoch [{}], train_loss: {:.4f}, val_loss: {:.4f}, val_acc: {:.4f}".format(
            epoch, result['train_loss'], result['val_loss'], result['val_acc']))

class MaskDetection(ImageClassificationBase):
    def __init__(self):
        super().__init__()
        self.network = nn.Sequential(
            #First convolution layer
            nn.Conv2d(3, 100, kernel_size=3, padding=1),
            nn.ReLU(),
            #Second convolution layer
            nn.Conv2d(100, 128, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            #First pooling layer
            nn.MaxPool2d(2, 2), # output: 128 x 8 x 8
            
            #Third convolution layer
            nn.Conv2d(128, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),
            #Fourth convolution layer
            nn.Conv2d(256, 256, kernel_size=3, stride=1, padding=1),
            nn.ReLU(),

            #Second pooling layer
            nn.MaxPool2d(2, 2), # output: 256 x 4 x 4
            
            #Flattening and rectification
            nn.Flatten(), 
            nn.Linear(160000, 512),
            nn.ReLU(),
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Linear(256, 3))
        
    def forward(self, xb):
        return self.network(xb)

def get_default_device():
    """Pick GPU if available, else CPU"""
    if torch.cuda.is_available():
        return torch.device('cuda')
    else:
        return torch.device('cpu')
device = get_default_device()

def to_device(data, device):
    """Move tensor(s) to chosen device"""
    if isinstance(data, (list,tuple)):
        return [to_device(x, device) for x in data]
    return data.to(device, non_blocking=True)

for images, labels in train_dl:
    print(images.shape)
    images = to_device(images, device)
    print(images.device)
    break

#Overriding Dataloader methods
class DeviceDataLoader():
    """Wrap a dataloader to move data to a device"""
    def __init__(self, dl, device):
        self.dl = dl
        self.device = device
        
    def __iter__(self):
        """Yield a batch of data after moving it to device"""
        for b in self.dl: 
            yield to_device(b, self.device)

    def __len__(self):
        """Number of batches"""
        return len(self.dl)

train_dl = DeviceDataLoader(train_dl, device)
val_dl = DeviceDataLoader(val_dl, device)

for xb, yb in val_dl:
    print('xb.device:', xb.device)
    print('yb:', yb)
    break

#Training
@torch.no_grad()
def evaluate(model, val_loader):
    model.eval()
    outputs = [model.validation_step(batch) for batch in val_loader]
    return model.validation_epoch_end(outputs)

def fit(epochs, lr, model, train_loader, val_loader, opt_func=torch.optim.SGD):
    history = []
    optimizer = torch.optim.SGD(model.parameters(), lr=0.001, momentum=0.9)
    for epoch in range(epochs):
        # Training Phase 
        print('epoch: ', epoch)
        model.train()
        train_losses = []
        for batch in train_loader:
            loss = model.training_step(batch)
            train_losses.append(loss)
            loss.backward()
            optimizer.step()
            optimizer.zero_grad()
        # Validation phase
        result = evaluate(model, val_loader)
        result['train_loss'] = torch.stack(train_losses).mean().item()
        model.epoch_end(epoch, result)
        history.append(result)
    return history

# Model (on GPU)
model = MaskDetection()
#model.load_state_dict(torch.load('./output/MaskDetectionFile.pth'))
to_device(model, device);

#model.load_state_dict(torch.load('./MaskDetectionFile.pth'))
model.eval();

sum(p.numel() for p in model.parameters())

history = [evaluate(model, val_dl)]
history

history = fit(5, 1e-3, model, train_dl, val_dl)

history = fit(10, 1e-3, model, train_dl, val_dl)
def plot_losses(history):
    losses = [x['val_loss'] for x in history]
    plt.plot(losses, '-x')
    plt.xlabel('epoch')
    plt.ylabel('loss')
    plt.title('Loss vs. No. of epochs');
    
def plot_accuracies(history):
    accuracies = [x['val_acc'] for x in history]
    plt.plot(accuracies, '-x')
    plt.xlabel('epoch')
    plt.ylabel('accuracy')
    plt.title('Accuracy vs. No. of epochs');
    
plot_losses(history)
plot_accuracies(history)

#saving to disk
torch.save(model.state_dict(), './model/MaskDetection.pth')


# Testing
import matplotlib.image as mpimg
def singleImage(path, label= None, show= False):
    img = cv2.imread(path)
    assert img is not None,"Immage wasn't read properly"
    img = cv2.resize(img, (100, 100))
    img = torch.from_numpy(img)
    img = img.permute((2, 0,1)) # model expects image to be of shape [3, 100, 100]
    img = img.unsqueeze(dim=0).float() # convert single image to batch [1, 3, 100, 100]
    img = img.to('cuda') # Using the same device as the model
    pred = model(img)
    _, preds = torch.max(pred, dim=1)
    print(classes[preds.item()])
    # plt.imshow(img.squeeze(dim=0).permute((1,2,0)).to('cpu'))

    if show:
        plt.imshow(mpimg.imread(path))
        print("the image is :" + classes[preds.item()])
        
def valImage(key, show = True):
    img = val_ds[key][0]
    pred = model(img.unsqueeze(dim=0).to(device))
    _, preds = torch.max(pred, dim=1)
    cv2.imshow('',img.permute(1, 2,0), cmap=cm.bgr)
    print("predicted:",classes[preds.item()])
    print("Actual:",classes[val_ds[key][1]])

#Give test file path
singleImage('./my_not_human_data/afhq/train/NotHuman/cat/flickr_cat_000005.jpg', show=True)



